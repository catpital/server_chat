#cmake_minimum_required(VERSION 3.12)

#project(Chat)

#set(CMAKE_CXX_STANDARD 20)
#set(CMAKE_CXX_STANDARD_REQUIRED ON)

#опция CMAKE_INCLUDE_CURRENT_DIR обязательно должна быть включена,
#если вы не меняли пути генерации файлов для Qt.
#при использовании .ui файлов, Qt на их основе генерирует промежуточные
#файлы исходников, и будет складывать их в директории сборки.
#Чтобы среда их видела, необходимо добавить в директории для включения
#(include, директории, хранящие подключаемые исходники), директорию сборки.
#set(CMAKE_INCLUDE_CURRENT_DIR ON)

#if ( CMAKE_COMPILER_IS_GNUCC )
 #   set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -Wall -Wextra")
#endif()
#if ( MSVC )
 #   set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} /W4")
#endif()

#здесь мы создаем переменную CHAT_LIBRARIES, в которой будем хранить
#все подключаемые к проекту библиотеки, в т.ч. и библиотеки Qt
#set(CHAT_LIBRARIES)

#здесь мы создаем и заполняем список подключаемых модулей Qt
#если нужно добавить модули, добавьте их в этот список по образцу:
#set(Qt5Modules [модуль 1] [модуль 2] ... [модуль n])
#set(Qt6Modules Core Widgets)

#здесь мы формируем из списка модулей список библиотек,
#которые требуется подключить, и складываем их в CHAT_LIBRARIES
#foreach(QtModule IN LISTS Qt6Modules)
 # list(APPEND CHAT_LIBRARIES Qt6::${QtModule})
#endforeach(QtModule)

#здесь проверяется наличие всех необходимых модулей и компонентов Qt
#find_package(Qt6 COMPONENTS ${Qt6Modules} REQUIRED LinguistTools)

#здесь мы формируем список всех исходников, ассоциированных с
#проектом Chat.
#на самом деле, обязательными являются только SRC RC и UI,
#но я добавляю так же HEADERS, что бы они так же отображались
#в дереве проектов.

#!!! не забывайте, что при добавлении/удалении файлов  обязательно
#нужно запускать CMake
#file(GLOB_RECURSE SRC_FILES *.cpp)
#file(GLOB_RECURSE HEADERS_FILES *.h)
#file(GLOB_RECURSE RC_FILES *.qrc)
#file(GLOB_RECURSE UI_FILES *.ui)


#здесь мы включаем обязательные для нас опции
#set(CMAKE_AUTOMOC ON)
#set(CMAKE_AUTORCC ON)
#set(CMAKE_AUTOUIC ON)

#вызываем обработку .ui и .qrc файлов. Здесь же происходит генерация
#промежуточных исходников.
#qt6_wrap_ui(QUI ${UI_FILES})
#qt6_add_resources(QRC ${RC_FILES})

#здесь происходит создание файлов переводов и установка зависимостей,
#чтобы эти файлы генерировались во время билда проекта
#set(TS_FILES
 # ${CMAKE_CURRENT_SOURCE_DIR}/translations/my_ru.ts)
#file(GLOB_RECURSE TS_SOURCES "*.cpp" "*.h" ".ui")
#add_custom_target(translations)
#по сути, при билде для каждого .ts файла вызывается
#утилита lupdate.exe
#foreach(_ts_file ${TS_FILES})
 # get_filename_component(_ts_name ${_ts_file} NAME_WE)
  #add_custom_command(
   # OUTPUT "${_ts_file}"
    #DEPENDS ${TS_SOURCES}
#вот тут как раз описывается путь к вызываемой утилите lupdate.exe
#и ее входные аргументы:
#    COMMAND ${Qt6_LUPDATE_EXECUTABLE} -recursive
 #   ${CMAKE_CURRENT_SOURCE_DIR} -ts ${_ts_file}
  #  )
  #add_custom_target(translate_${_ts_name} DEPENDS ${_ts_file})
  #add_dependencies(translations translate_${_ts_name})
#endforeach()

#подключаем файлы трансляции(переводов)
#qt6_add_translation(QM_FILES ${TS_FILES})

#add_executable(Chat ${QM_FILES} ${SRC_FILES} ${HEADERS_FILES}
  #${RC_FILES} ${UI_FILES})

#подключаем к проекту библиотеки
#target_link_libraries(Chat
 # PUBLIC
  #${CHAT_LIBRARIES}
  #)


cmake_minimum_required(VERSION 3.5)

project(server_chat VERSION 0.1 LANGUAGES CXX)
find_package(Qt6 6.4.3 REQUIRED COMPONENTS Core Quick SQl)
#Qt${QT6}::Sql
#find_package(QT 6QPSql REQUIRED)
#find_package(Qt 6.4.3 REQUIRED QtGui QtXml SQL)

#target_link_libraries(server_chat Qt6::Core Qt6::Quick Qt6::Sql)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
find_package(Qt6 COMPONENTS ${Qt6Modules} REQUIRED LinguistTools)
#вызываем обработку .ui и .qrc файлов. Здесь же происходит генерация
#промежуточных исходников.
#qt6_wrap_ui(QUI ${UI_FILES})
#qt6_add_resources(QRC ${RC_FILES})

if ( CMAKE_COMPILER_IS_GNUCC )
set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -Wall -Wextra")
endif()
if ( MSVC )
set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} /W4")
endif()
find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)
set(CHAT_LIBRARIES)
set(Qt6Modules Core Widgets)

set(PROJECT_SOURCES
        main.cpp
        mainwindow.cpp
        mainwindow.h
        mainwindow.ui
        connectiondb.cpp
        connectiondb.h
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(server_chat
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
        resurse.qrc
        connectiondb.h connectiondb.cpp
        serverchat.pro
    )
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET server_chat APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(server_chat SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(server_chat
            ${PROJECT_SOURCES}
        )
    endif()
endif()

target_link_libraries(server_chat PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.server_chat)
endif()
set_target_properties(server_chat PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS server_chat
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(server_chat)
endif()
